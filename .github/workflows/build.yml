name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            output_name: pianoblox.exe
            artifact_path: dist/*.exe
          - os: macos-latest
            output_name: pianoblox
            artifact_path: dist/pianoblox
          - os: ubuntu-latest
            output_name: pianoblox
            artifact_path: dist/pianoblox

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pynput pyinstaller
          
      - name: Create midi directory (Unix)
        if: runner.os != 'Windows'
        run: mkdir -p midi
          
      - name: Create midi directory (Windows)
        if: runner.os == 'Windows'
        run: |
          if (-not (Test-Path -Path "midi")) {
            mkdir midi
          }
          
      - name: Build with PyInstaller
        run: pyinstaller --onefile --name ${{ matrix.output_name }} pianoblox.py
          
      - name: Upload Windows Artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: dist/*.exe

      - name: Upload macOS Artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: dist/pianoblox

      - name: Upload Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: dist/pianoblox

  publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 