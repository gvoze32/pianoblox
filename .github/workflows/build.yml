name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            output_name: pianoblox.exe
            artifact_path: dist/pianoblox.exe
          - os: macos-latest
            output_name: PianoBlox
            artifact_path: dist/PianoBlox.app
          - os: ubuntu-latest
            output_name: pianoblox-linux
            artifact_path: dist/pianoblox-linux.AppImage

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pynput pyinstaller appdirs
          
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          pip install pyinstaller-hooks-contrib
          
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2
          pip install pyinstaller-hooks-contrib
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          
      - name: Create midi directory (Unix)
        if: runner.os != 'Windows'
        run: mkdir -p midi
          
      - name: Create midi directory (Windows)
        if: runner.os == 'Windows'
        run: |
          if (-not (Test-Path -Path "midi")) {
            mkdir midi
          }
          
      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: pyinstaller --onefile --windowed --noconsole --name ${{ matrix.output_name }} --icon=assets/icon.ico pianoblox.py
 
      - name: Build with PyInstaller (macOS)
        if: runner.os == 'macOS'
        run: |
          # Create .app bundle
          pyinstaller --windowed --noconsole --name ${{ matrix.output_name }} --icon=assets/icon.icns pianoblox.py
          
      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          # Create basic executable
          pyinstaller --onefile --windowed --noconsole --name ${{ matrix.output_name }} --icon=assets/icon.png pianoblox.py
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy executable to AppDir
          cp dist/${{ matrix.output_name }} AppDir/usr/bin/
          
          # Copy icon
          cp assets/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/pianoblox.png
          
          # Create desktop file
          cat > AppDir/usr/share/applications/pianoblox.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=PianoBlox
          Exec=pianoblox-linux
          Icon=pianoblox
          Categories=AudioVideo;Audio;Music;
          EOF
          
          # Create AppRun file
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin:\${PATH}"
          "\${HERE}/usr/bin/${{ matrix.output_name }}" "\$@"
          EOF
          
          chmod +x AppDir/AppRun
          
          # Generate AppImage
          ./appimagetool AppDir dist/${{ matrix.output_name }}.AppImage
          
      - name: Upload Windows Artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: dist/*.exe

      - name: Upload macOS Artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: dist/*.app

      - name: Upload Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: dist/*.AppImage

  publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 